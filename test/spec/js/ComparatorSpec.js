// Generated by CoffeeScript 1.8.0
(function() {
  describe('Comparator Functions', function() {
    var hm, noop;
    hm = window.hm;
    noop = function() {};
    beforeEach(function() {
      jasmine.addMatchers({
        toBeFalseForTypes: function() {
          return {
            compare: function(method, types) {
              var i, results, type;
              results = {
                pass: true
              };
              for (i in types) {
                type = types[i];
                if (method.call(hm, type)) {
                  results.pass = false;
                  results.message = 'Expected ' + Object.prototype.toString.call(type) + ' to be false';
                }
              }
              return results;
            }
          };
        }
      });
    });
    it('isUndefined: returns true when argument is undefined', function() {
      return expect(hm.isUndefined(void 0)).toBe(true);
    });
    it('isUndefined: returns false when argument is not undefined', function() {
      return expect(hm.isUndefined).toBeFalseForTypes([null, true, 'string', 42, [], {}, noop]);
    });
    it('isNull: returns true when argument is null', function() {
      return expect(hm.isNull(null)).toBe(true);
    });
    it('isNull: returns false when argument is not null', function() {
      return expect(hm.isNull).toBeFalseForTypes([void 0, true, 'string', 42, [], {}, noop]);
    });
    it('isBoolean: returns true when argument is a boolean', function() {
      return expect(hm.isBoolean(true)).toBe(true);
    });
    it('isBoolean: returns false when argument is not a boolean', function() {
      return expect(hm.isBoolean).toBeFalseForTypes([void 0, null, 'string', 42, [], {}, noop]);
    });
    it('isString: returns true when argument is a string', function() {
      return expect(hm.isString('string')).toBe(true);
    });
    it('isString: returns false when argument is not a string', function() {
      return expect(hm.isString).toBeFalseForTypes([void 0, null, true, 42, [], {}, noop]);
    });
    it('isNumber: returns true when argument is a number', function() {
      return expect(hm.isNumber(42)).toBe(true);
    });
    it('isNumber: returns false when argument is not a number', function() {
      return expect(hm.isNumber).toBeFalseForTypes([void 0, null, true, 'string', [], {}, noop]);
    });
    it('isFunction: returns true when argument is a function', function() {
      return expect(hm.isFunction(noop)).toBe(true);
    });
    it('isFunction: returns false when argument is not a function', function() {
      return expect(hm.isFunction).toBeFalseForTypes([void 0, null, true, 'string', 42, [], {}]);
    });
    it('isArray: returns true when argument is an array', function() {
      return expect(hm.isArray([])).toBe(true);
    });
    it('isArray: returns false when argument is not an array', function() {
      return expect(hm.isArray).toBeFalseForTypes([void 0, null, true, 'string', 42, {}, noop]);
    });
    it('isObject: returns true when argument is an object', function() {
      expect(hm.isObject([])).toBe(true);
      return expect(hm.isObject({})).toBe(true);
    });
    it('isObject: returns false when argument is not an object', function() {
      return expect(hm.isObject).toBeFalseForTypes([void 0, null, true, 'string', 42, noop]);
    });
    it('isPlainObject: returns true when argument is a plain object', function() {
      return expect(hm.isPlainObject({})).toBe(true);
    });
    return it('isPlainObject: returns false when argument is not a plain object', function() {
      return expect(hm.isPlainObject).toBeFalseForTypes([void 0, null, true, 'string', 42, [], noop, document.createElement('div')]);
    });
  });

}).call(this);

//# sourceMappingURL=ComparatorSpec.js.map
