// Generated by CoffeeScript 1.8.0

/*
    "Help Me" JavaScript Library v1.3.0
    Copyright 2014-2015 Cameron Condry
    Released under the MIT license
    Documentation found in README.md
 */

(function() {
  'use strict';
  var HelpMe;

  HelpMe = (function() {
    function HelpMe() {}


    /* Comparator Functions */

    HelpMe.prototype.isUndefined = function(obj) {
      return obj === void 0;
    };

    HelpMe.prototype.isNull = function(obj) {
      return obj === null;
    };

    HelpMe.prototype.isBoolean = function(obj) {
      return typeof obj === 'boolean';
    };

    HelpMe.prototype.isString = function(obj) {
      return typeof obj === 'string';
    };

    HelpMe.prototype.isNumber = function(obj) {
      return typeof obj === 'number';
    };

    HelpMe.prototype.isFunction = function(obj) {
      return typeof obj === 'function';
    };

    HelpMe.prototype.isObject = function(obj) {
      return typeof obj === 'object' && !!obj;
    };

    HelpMe.prototype.isPlainObject = function(obj) {
      return this.isObject(obj) && !this.isArray(obj) && !obj.nodeType;
    };

    HelpMe.prototype.isArray = Array.isArray || function(obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };


    /* Collection Functions */

    HelpMe.prototype.each = function(obj, callback) {
      var i, length, _i, _ref;
      if (!this.isObject(obj) && !this.isArray(obj)) {
        return obj;
      }
      length = obj.length;
      if (this.isArray(obj)) {
        for (i = _i = 0, _ref = length - 1; _i <= _ref; i = _i += 1) {
          callback.call(obj[i], i, obj[i]);
        }
      } else {
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            callback.call(obj[i], i, obj[i]);
          }
        }
      }
      return obj;
    };

    HelpMe.prototype.extend = function(obj) {
      var target;
      target = arguments[0] || {};
      if (!this.isObject(target)) {
        target = {};
      }
      this.each(arguments, (function(_this) {
        return function(i, arg) {
          var clone, name, sourceOption, targetOption, value;
          if (i === 0) {
            return;
          }
          for (name in arg) {
            value = arg[name];
            targetOption = target[name];
            sourceOption = value;
            if (value === target) {
              return;
            }
            if (_this.isPlainObject(sourceOption)) {
              if (_this.isArray(sourceOption)) {
                clone = _this.isArray(targetOption) ? targetOption : [];
              } else {
                clone = _this.isObject(targetOption) ? targetOption : {};
              }
              target[name] = _this.extend(clone, sourceOption);
            } else {
              target[name] = sourceOption;
            }
          }
        };
      })(this));
      return target;
    };


    /* Helper Functions */

    HelpMe.prototype.proxy = function(context, fn) {
      return function() {
        return fn.apply(context, arguments);
      };
    };

    HelpMe.prototype.trim = function(value) {
      if (this.isString(value)) {
        return value.trim();
      } else {
        return value;
      }
    };

    HelpMe.prototype.watchMethod = function(obj, method, callback) {
      var original;
      original = obj[method];
      if (this.isFunction(original)) {
        obj[method]((function(_this) {
          return function() {
            callback.apply(_this, arguments);
            original.apply(obj, arguments);
          };
        })(this));
      }
      return this;
    };

    return HelpMe;

  })();


  /* register with globals */

  if (typeof window !== "undefined" && window !== null) {
    window.hm = new HelpMe();
  }


  /* register with amd */

  if (typeof define !== "undefined" && define !== null) {
    define('hm', [], function() {
      return new HelpMe();
    });
  }

}).call(this);

//# sourceMappingURL=helpme.js.map
